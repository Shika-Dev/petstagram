name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Boot simulator
        run: |
          UDID=$(xcrun simctl create "TestDevice" "iPhone 16 Pro Max" com.apple.CoreSimulator.SimRuntime.iOS-17-4)
          xcrun simctl boot "$UDID"
          xcrun simctl list | grep Booted
        
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "id=$UDID"
      
      - name: Test and Generate .xcresult
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if ls -A | grep -iq "\.xcworkspace$"; then filetype_parameter="workspace" && file_to_build=$(ls -A | grep -i "\.xcworkspace$"); else filetype_parameter="project" && file_to_build=$(ls -A | grep -i "\.xcodeproj$"); fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild test \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "id=$UDID" \
            -resultBundlePath TestResults.xcresult \
            -parallel-testing-enabled NO \
            -enableCodeCoverage YES \
            || TEST_FAILED=true

      - name: Zip xcresult bundle
        if: always()
        run: zip -r TestResults.xcresult.zip TestResults.xcresult

      - name: Upload Test Result Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult
          path: TestResults.xcresult.zip
          
      - name: Fail if tests failed
        if: env.TEST_FAILED == 'true'
        run: exit 1

          
